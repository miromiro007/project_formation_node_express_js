const { User, valid_mise_a_jour, valid_code_validation,valid_activation_compte } = require("../models/user");
const asyncHandler = require("express-async-handler");
const bcrypt = require("bcrypt");
require("dotenv").config();
const { generateToken } = require("../middleware/verifyToken");
const { sendValidationUpdate, sendValidationConfirmation ,sendStatusActif} = require("../utils/mailer");

// PUT Update user
/**
 * @file updateController.js
 * @description Met √† jour les informations d'un utilisateur apr√®s v√©rification du token
 * @route PUT /api/userUpdate/Update/:id
 * @access Priv√© - Seul l'utilisateur propri√©taire du compte
 */
const UpdateUser = asyncHandler(async (req, res) => {
    console.log("Decoded user :", req.user);

    //üîê V√©rification le role 
    if (req.body.role && req.body.role !== user.role) {
    return res.status(403).json({ 
        message: "La modification du r√¥le n'est pas autoris√©e" 
    });
}

    // üîê V√©rification que l'utilisateur modifie bien son propre compte
    if (req.user.id !== req.params.id) {
        return res.status(403).json({ message: "Modification interdite" });
    }

    // ‚úÖ Validation des donn√©es avec Joi
    const { error } = valid_mise_a_jour(req.body);
    if (error) {
        return res.status(400).json({ message: error.details[0].message });
    }

    // üîç Recherche de l'utilisateur dans la base de donn√©es
    const user = await User.findById(req.params.id);
    if (!user) {
        return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    // üìß Gestion sp√©ciale pour le changement d'email
    if (req.body.email && req.body.email !== user.email) {
        // G√©n√©ration d'un code de validation √† 6 chiffres
        const validationCode = Math.floor(100000 + Math.random() * 900000).toString();
        // Expiration du code dans 24 heures
        const validationCodeExpires = new Date(Date.now() + 24 * 60 * 60 * 1000);

        // Stockage temporaire du nouvel email et du code
        user.newEmail = req.body.email; // Champ temporaire pour le nouvel email
        user.validationCode = validationCode;
        user.validationCodeExpires = validationCodeExpires;
        user.emailVerified = false; // Email non valid√© tant que le code n'est pas confirm√©

        await user.save();
        
        // üì® Envoi du code de validation par email
        await sendValidationUpdate(req.body.email, validationCode);

        return res.status(200).json({
            message: "Un code de validation a √©t√© envoy√© √† votre nouvelle adresse email.",
            requiresValidation: true
        });
    }

    // üîê Hashage du mot de passe s'il est modifi√©
    if (req.body.password) {
        const salt = await bcrypt.genSalt(10);
        req.body.password = await bcrypt.hash(req.body.password, salt);
    }

    // üìã Pr√©paration des donn√©es de mise √† jour (on exclut l'email qui est g√©r√© s√©par√©ment)
    const updateData = { ...req.body };
    delete updateData.email; // L'email est g√©r√© via le processus de validation

    // üíæ Mise √† jour de l'utilisateur dans la base de donn√©es
    const updatedUser = await User.findByIdAndUpdate(
        req.params.id,
        updateData,
        { new: true } // Retourne le document mis √† jour
    ).select("-password"); // Exclut le mot de passe de la r√©ponse

    // ‚úÖ R√©ponse de succ√®s
    res.status(200).json({
        message: "Utilisateur mis √† jour avec succ√®s",
        user: updatedUser
    });
});

// POST Validate email update
/**
 * @file updateController.js
 * @description Valide la mise √† jour de l'adresse email avec le code re√ßu
 * @route POST /api/userUpdate/validateEmail
 * @access Public - N√©cessite le code de validation
 */
const ValidateEmailUpdate = asyncHandler(async (req, res) => {
    const { error } = valid_code_validation(req.body);
    if (error) {
        return res.status(400).json({ message: error.details[0].message });
    }

    // üîç Chercher l'utilisateur par le code de validation uniquement
    const user = await User.findOne({ validationCode: req.body.code });
    
    if (!user) {
        return res.status(404).json({ message: "Code de validation invalide ou expir√©" });
    }

    // ‚è∞ V√©rifier si le code n'a pas expir√©
    if (user.validationCodeExpires < new Date()) {
        return res.status(400).json({ message: "Le code de validation a expir√©" });
    }

    // ‚úÖ Mettre √† jour l'email avec celui fourni dans la requ√™te
    user.email = req.body.email;
     // Mise √† jour de l'utilisateur : email valid√©
  user.emailVerified = true;
  user.validationCode = null;
  user.validationCodeExpires = null;
    
    await user.save();

    await sendValidationConfirmation(user.email);

    res.status(200).json({
        message: "Email valid√© et mis √† jour avec succ√®s"
    });
});

// PUT Changer le status 
/**
 * @file updateController.js
 * @description Valide la mise √† jour de l'adresse email avec le code re√ßu
 * @route  /api/userUpdate/Change_status
 * @access only (admin)
 */
const Change_status = asyncHandler(async(req, res) => {
    console.log("Decoded user :", req.user);
    
    // 1. V√©rifier que seul un admin peut faire cette action
    if (req.user.role !== "admin") {
        return res.status(403).json({ message: "Non autoris√© - R√©serv√© aux admins" });
    }

    const { error } = valid_activation_compte(req.body);
    if (error) {
        return res.status(400).json({ message: error.details[0].message });
    }

    // 2. Trouver l'utilisateur √† modifier
    const user = await User.findById(req.params.id);
    if (!user) {
        return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    // 3. V√©rifier qu'on ne modifie pas son propre statut
    if (req.user.id === req.params.id) {
        return res.status(403).json({ message: "Vous ne pouvez pas modifier votre propre statut" });
    }
    // 4. V√©rifier si le statut est d√©j√† celui demand√© (√©vite op√©ration inutile)
    if (user.statut === req.body.statut) {
        return res.status(200).json({
            message: `Le statut est d√©j√† "${user.statut}" - Aucune modification n√©cessaire`
        });
    }

    // 5. Mettre √† jour le statut
    user.statut = req.body.statut; 
    await user.save();

    // 6. Envoyer l'email de notification
    await sendStatusActif(user.email, user.statut);

    return res.status(200).json({
        message: `Statut modifi√© avec succ√®s: ${user.statut}`
    });
});
module.exports = { UpdateUser, ValidateEmailUpdate , Change_status };